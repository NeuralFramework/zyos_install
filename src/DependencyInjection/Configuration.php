<?php

    namespace ZyosInstallBundle\DependencyInjection;

    use Symfony\Component\Config\Definition\Builder\TreeBuilder;
    use Symfony\Component\Config\Definition\ConfigurationInterface;

    /**
     * Class Configuration
     *
     * @package ZyosInstallBundle\DependencyInjection
     */
    class Configuration implements ConfigurationInterface {

        /**
         * Generates the configuration tree builder.
         *
         * @return \Symfony\Component\Config\Definition\Builder\TreeBuilder The tree builder
         */
        public function getConfigTreeBuilder() {

            $treeBuilder = new TreeBuilder('zyos_install');
            $rootNode = $treeBuilder->getRootNode();
            $rootNode
                ->children()
                    ->scalarNode('apache_user')
                        ->info('Usuario apache configurado para permisos de directorios y archivos')
                        ->isRequired()
                        ->defaultValue('www-data')
                    ->end()
                    ->scalarNode('directory_permission')
                        ->info('Permiso configurado para asignación de directorios y archivos')
                        ->isRequired()
                        ->defaultValue('0777')
                    ->end()
                    ->scalarNode('path')
                        ->info('Directorio donde se guardaran los datos de los procesos de instalación')
                        ->isRequired()
                        ->defaultValue('%kernel.project_dir%/src/Resources/install')
                    ->end()
                    ->scalarNode('path_dump')
                        ->info('Directorio donde se guardaran los DUMP de base de datos')
                        ->isRequired()
                        ->defaultValue('%kernel.project_dir%/src/Resources/install/dump')
                    ->end()
                    ->scalarNode('path_sql')
                        ->info('Directorio de archivos SQL que se importarán a la base de datos')
                        ->isRequired()
                        ->defaultValue('%kernel.project_dir%/src/Resources/install/sql')
                    ->end()

                    ->booleanNode('database_create')
                        ->info('Ejecución de comando DOCTRINE de creación de base de datos')
                        ->isRequired()
                        ->defaultTrue()
                    ->end()
                    ->booleanNode('database_drop')
                        ->info('Ejecución de comando DOCTRINE de eliminación de base de datos')
                        ->isRequired()
                        ->defaultTrue()
                    ->end()
                    ->booleanNode('database_fixtures')
                        ->info('Ejecución de comando para insertar los datos a través de fixtures de DOCTRINE')
                        ->isRequired()
                        ->defaultTrue()
                    ->end()
                    ->booleanNode('database_import_sql')
                        ->info('Ejecución de comando DOCTRINE de importar archivos SQL a la base de datos')
                        ->isRequired()
                        ->defaultTrue()
                    ->end()
                    ->booleanNode('database_schema_create')
                        ->info('Ejecución de comando DOCTRINE creación de esquema')
                        ->isRequired()
                        ->defaultTrue()
                    ->end()
                    ->booleanNode('database_update_schema')
                        ->info('Ejecución de comando DOCTRINE actualización de esquema')
                        ->isRequired()
                        ->defaultTrue()
                    ->end()
                    ->booleanNode('assets_install')
                        ->info('Ejecución de comando de instalación de assets de librerías y bundles')
                        ->isRequired()
                        ->defaultTrue()
                    ->end()
                    ->booleanNode('cache_clear')
                        ->info('Ejecución de comando para limpiar la cache')
                        ->isRequired()
                        ->defaultTrue()
                    ->end()
                    ->booleanNode('create_symlink')
                        ->info('Ejecución de comando para crear Symlinks')
                        ->isRequired()
                        ->defaultTrue()
                    ->end()
                    ->booleanNode('create_mirror')
                        ->info('Ejecución de comando para crear mirror de directorios')
                        ->isRequired()
                        ->defaultTrue()
                    ->end()
                    ->arrayNode('symlink')
                        ->prototype('array')
                            ->children()
                                ->arrayNode('environment')
                                    ->info('Entornos de ejecución del registro.')
                                    ->beforeNormalization()->ifString()->then(function ($v) { return [$v]; })->end()
                                    ->prototype('scalar')->end()
                                    ->defaultValue([])
                                ->end()
                                ->scalarNode('origin')
                                    ->isRequired()
                                    ->info('Directorio o archivo de origen.')
                                    ->beforeNormalization()->ifString()->then(function ($v) { return realpath($v); })->end()
                                ->end()
                                ->scalarNode('destination')
                                    ->isRequired()
                                    ->info('Directorio o archivo de destino.')
                                    ->beforeNormalization()->ifString()->then(function ($v) { return '%kernel.project_dir%/'.ltrim($v, DIRECTORY_SEPARATOR); })->end()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('mirror')
                        ->prototype('array')
                            ->children()
                                ->arrayNode('environment')
                                    ->info('Entornos de ejecución del registro.')
                                    ->beforeNormalization()->ifString()->then(function ($v) { return [$v]; })->end()
                                    ->prototype('scalar')->end()
                                    ->defaultValue([])
                                ->end()
                                ->scalarNode('origin')
                                    ->isRequired()
                                    ->info('Directorio de origen.')
                                    ->beforeNormalization()->ifString()->then(function ($v) { return realpath($v); })->end()
                                ->end()
                                ->scalarNode('destination')
                                    ->isRequired()
                                    ->info('Directorio de destino.')
                                    ->beforeNormalization()->ifString()->then(function ($v) { return '%kernel.project_dir%/'.ltrim($v, DIRECTORY_SEPARATOR); })->end()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('import_sql')
                        ->prototype('array')
                            ->children()
                                ->arrayNode('environment')
                                    ->info('Entornos de ejecución del registro.')
                                    ->beforeNormalization()->ifString()->then(function ($v) { return [$v]; })->end()
                                    ->prototype('scalar')->end()
                                    ->defaultValue([])
                                ->end()
                                ->scalarNode('file')
                                    ->isRequired()
                                    ->info('Archivo SQL a importar')
                                    ->beforeNormalization()->ifString()->then(function ($v) { return '%zyos_install.path_sql%/'.$v; })->end()
                                ->end()
                            ->end()
                        ->end()
                    ->end()

                ->end();

            return $treeBuilder;
        }
    }