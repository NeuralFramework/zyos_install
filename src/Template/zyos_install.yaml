##
# Información de estructura que requieren los procesos de la instalación de la
# aplicación en este punto los datos son para procesos de estructura y creación
# de directorios y archivos
##
zyos_install:

    ##
    # Asignación de los diferentes directorios necesarios para el proceso requerido
    # del paquete de instalación y sus herramientas
    ##
    paths:
        local: '%kernel.project_dir%/src/Resources/install'
        dump: '%kernel.project_dir%/src/Resources/install/dump'
        sql: '%kernel.project_dir%/src/Resources/install/sql'

    ##
    # Asignación de las variables de ejecución durante la instalación activa y
    # desactiva las características que se ejecuta secuencial mente para los procesos
    # requeridos
    ##
    install:
        enable: true
        configurations:
            - { environment: ['dev', 'prod'], type: 'symfony_command', enable: true, command: 'doctrine:database:drop', arguments: { --if-exists: true, --force: true } }
            - { environment: ['dev', 'prod'], type: 'symfony_command', enable: true, command: 'doctrine:database:create', arguments: [] }
            - { environment: ['dev', 'prod'], type: 'symfony_command', enable: true, command: 'doctrine:fixtures:load', arguments: { --append: true, --group: [ '{{ arg_env }}' ] } }
            - { environment: ['dev', 'prod'], type: 'symfony_command', enable: false, command: 'zyos:sql:import', arguments: { environment: '{{ arg_env }}' } }
            - { environment: ['dev', 'prod'], type: 'symfony_command', enable: false, command: 'doctrine:schema:drop', arguments: { --force: true } }
            - { environment: ['dev', 'prod'], type: 'symfony_command', enable: true, command: 'doctrine:schema:create', arguments: [] }
            - { environment: ['dev', 'prod'], type: 'symfony_command', enable: false, command: 'doctrine:schema:update', arguments: { --force: true } }
            - { environment: ['dev', 'prod'], type: 'symfony_command', enable: true, command: 'assets:install', arguments: { target: 'public', --symlink: true, --relative: true } }
            - { environment: ['dev', 'prod'], type: 'symfony_command', enable: false, command: 'zyos:create:symlink', arguments: { environment: '{{ arg_env }}' } }
            - { environment: ['dev', 'prod'], type: 'symfony_command', enable: false, command: 'zyos:create:mirror', arguments: { environment: '{{ arg_env }}' } }
            - { environment: ['dev', 'prod'], type: 'symfony_command', enable: true, command: 'cache:clear', arguments: { --no-warmup: true, --no-optional-warmers: true } }

    ##
    # Este proceso agrega enlaces simbólicos de un archivo o un directorio dentro del
    # proyecto este proceso se maneja para procesos específicos los cuáles se pueden
    # asignar para entornos de desarrollo, producción o ambos
    #
    # configurations:
    #    - { environment: ['dev'], origin: "/path/to/origin", destination: "/path/to/destination" }
    #    - { environment: ['dev', 'prod'], origin: "/path/to/origin", destination: "/path/to/destination" }
    ##
    symlinks:
        enable: false # activar funcionalidad
        configurations: ~

    ##
    # Este proceso copia directorios de un directorio a otro directorio dentro del
    # proyecto este proceso se maneja para procesos específicos los cuáles se pueden
    # asignar para entornos de desarrollo, producción o ambos
    #
    # configurations:
    #    - { environment: ['dev'], origin: "/path/to/origin", destination: "/path/to/destination" }
    #    - { environment: ['dev', 'prod'], origin: "/path/to/origin", destination: "/path/to/destination" }
    ##
    mirrors:
        enable: false # activar funcionalidad
        configurations: ~


    ##
    # Generá el proceso de ejecución del export de la base de datos a través del
    # cliente instalado en el equipo servidor o en su defecto en el host donde se
    # ejecutará este proceso este elemento es una ayuda adicional para los procesos
    # tanto para desarrollo o producción
    #
    # Ejemplo de conexión
    #
    # connections:
    #     name_connection:
    #         client: mysqldump -> for now only mysqldump
    #         host: host of connection
    #         username: username database
    #         password: password database
    #         database: name of database
    ##
    dump:
        enable: false # activar funcionalidad
        connections: ~

    ##
    # Generá el proceso de ejecutar el el comando de Doctrine para ejecutar archivos
    # SQL directamente en la base de datos este proceso es una ayuda para el manejo de
    # archivos en los diferentes despliegues de producción o desarrollo.
    #
    # Ejemplo de configuración
    #
    # configurations:
    #     - { environment: ['dev', 'prod'], files: '1.sql' }
    #     - { environment: ['prod'], files: ['1.sql', '2.sql', '3.sql'] }
    ##
    sql_import:
        enable: false # activar funcionalidad
        configurations: ~

    ##
    # Generá el proceso de ejecutar comandos de Symfony adicionales que se requieran
    # para el proceso tanto de desarrollo como el de producción donde es posible
    # ejecutar comandos personalizados creados con symfony para la ayuda requerida
    #
    # configurations:
    #    - { environment: ['dev'], command: 'custom:command' }
    #    - { environment: ['dev', 'prod'], command: 'custom:command', arguments: { 'argument': 'value'  } }
    #    - { environment: ['dev', 'prod'], command: 'custom:command', arguments: { 'argument': 'value' '--option': true } }
    ##
    commands:
        enable: false # activar funcionalidad
        configurations: ~